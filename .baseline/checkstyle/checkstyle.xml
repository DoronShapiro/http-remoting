<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<!--
    Palantir Baseline Checkstyle configuration.
    Authors: Robert Fink, Brian Worth, Merrick Zoubeiri, and many other contributors.
 -->

<module name="Checker">
    <property name="charset" value="UTF-8"/>
    <property name="severity" value="error"/>

    <module name="FileLength">
        <property name="fileExtensions" value="java"/>
    </module>
    <module name="FileTabCharacter"/>
    <module name="NewlineAtEndOfFile">
        <property name="lineSeparator" value="lf"/>
    </module>
    <module name="RegexpMultiline">
        <property name="fileExtensions" value="java"/>
        <property name="format" value="@VisibleForTesting\s+(protected|public)"/>
        <property name="message" value="@VisibleForTesting members should be package-private."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="&lt;&lt;&lt;&lt;&lt;&lt;&lt;"/>
        <property name="message" value="Found (&lt;&lt;&lt;&lt;&lt;&lt;&lt;), so it looks like you had a merge conflict that compiles. Please fix it."/>
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="&gt;&gt;&gt;&gt;&gt;&gt;&gt;"/>
        <property name="message" value="Found (&gt;&gt;&gt;&gt;&gt;&gt;&gt;), so it looks like you had a merge conflict that compiles. Please fix it."/>
    </module>
    <module name="SuppressionFilter">
        <property name="file" value="${samedir}/checkstyle-suppressions.xml"/>
    </module>
    <module name="SuppressWarningsFilter"/>
    <module name="TreeWalker">
        <module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false"/>
            <property name="allowedAbbreviationLength" value="1"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF"/>
        </module>
        <module name="AnnotationLocation">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="allowSamelineMultipleAnnotations" value="true"/>
        </module>
        <module name="AnnotationUseStyle"/>
        <module name="ArrayTypeStyle"/>
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated"/>
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"/>
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true"/>
            <property name="allowByTailComment" value="true"/>
            <property name="allowNonPrintableEscapes" value="true"/>
        </module>
        <module name="AvoidNestedBlocks"/>
        <module name="AvoidStarImport"/>
        <module name="AvoidStaticImport">
            <property name="excludes" value="org.junit.Assert.*,org.hamcrest.Matchers.*,org.mockito.Mockito.*,org.mockito.Matchers.*,org.assertj.core.api.Assertions.*,com.google.common.base.Preconditions.*,org.apache.commons.lang3.Validate.*"/>
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="CovariantEquals"/>
        <module name="CyclomaticComplexity"/>
        <module name="DefaultComesLast"/>
        <module name="DesignForExtension"/>
        <module name="EmptyBlock">
            <property name="option" value="TEXT"/>
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected"/>
        </module>
        <module name="EmptyForInitializerPad"/>
        <module name="EmptyLineSeparator">
            <property name="allowNoEmptyLineBetweenFields" value="true"/>
        </module>
        <module name="EmptyStatement"/>
        <module name="FallThrough"/>
        <module name="FinalClass"/>
        <module name="GenericWhitespace">
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace."/>
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace."/>
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."/>
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."/>
        </module>
        <module name="HiddenField">
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
            <property name="setterCanReturnItsClass" value="true"/>
        </module>
        <module name="HideUtilityClassConstructor"/>
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun, org.elasticsearch.common.base, org.elasticsearch.common.joda"/>
        </module>
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean"/>
            <property name="classes" value="java.lang.Byte"/>
            <property name="classes" value="java.lang.Character"/>
            <property name="classes" value="java.lang.Double"/>
            <property name="classes" value="java.lang.Integer"/>
            <property name="classes" value="java.lang.Long"/>
        </module>
        <module name="IllegalThrows"/>
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"/>
            <property name="format" value="\\u00(08|09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"/>
            <property name="message" value="Avoid using corresponding octal or Unicode escape."/>
        </module>
        <module name="IllegalType"/>
        <module name="ImportOrder">
            <property name="groups" value="/.*/"/>
            <property name="option" value="top"/>
            <property name="sortStaticImportsAlphabetically" value="true"/>
        </module>
        <module name="Indentation"/>
        <module name="InnerAssignment"/>
        <module name="JavadocMethod">
            <property name="scope" value="public"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="minLineCount" value="99999999"/>
            <property name="allowedAnnotations" value="Override, Test"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
        </module>
        <module name="JavadocStyle"/>
        <module name="JavadocTagContinuationIndentation"/>
        <module name="LeftCurly">
            <property name="maxLineLength" value="120"/>
        </module>
        <module name="LineLength">
            <property name="max" value="120"/>
            <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"/>
        </module>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName">
            <property name="tokens" value="VARIABLE_DEF"/>
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <property name="allowOneCharVarInForLoop" value="true"/>
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodLength"/>
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$"/>
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MethodParamPad"/>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"/>
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="MissingDeprecated"/>
        <module name="MissingSwitchDefault"/>
        <module name="ModifiedControlVariable"/>
        <module name="ModifierOrder"/>
        <module name="MultipleVariableDeclarations"/>
        <module name="MutableException"/>
        <module name="NeedBraces"/>
        <module name="NestedForDepth">
            <property name="max" value="2"/>
        </module>
        <module name="NestedTryDepth"/>
        <module name="NoClone"/>
        <module name="NoFinalizer"/>
        <module name="NoLineWrap"/>
        <module name="NoWhitespaceBefore">
            <property name="allowLineBreaks" value="true"/>
        </module>
        <module name="NoWhitespaceAfter">
            <property name="allowLineBreaks" value="false"/>
            <property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
        </module>
        <module name="NonEmptyAtclauseDescription"/>
        <module name="OneStatementPerLine"/>
        <module name="OneTopLevelClass"/>
        <module name="OperatorWrap">
            <property name="option" value="NL"/>
            <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR, LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR "/>
        </module>
        <module name="OuterTypeFilename"/>
        <module name="OverloadMethodsDeclarationOrder"/>
        <module name="PackageAnnotation"/>
        <module name="PackageDeclaration"/>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParameterAssignment"/>
        <module name="ParameterName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/>
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="ParenPad"/>
        <module name="RedundantImport"/>
        <module name="RedundantModifier"/>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertEquals\(null,"/>
            <property name="message" value="Use assertNull() instead."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertFalse\(.*[!=]="/>
            <property name="message" value="Use better assertion method(s): assertEquals(), assertNull(), assertSame(), etc."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertNotNull\("/>
            <property name="message" value="assertNotNull() almost always shows up in a lazily-written so-called test for coverage. Do something else to validate the expected output: assertEquals(), assertFalse(String.isEmpty()), etc."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertTrue\(!"/>
            <property name="message" value="Use assertFalse()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="assertTrue\(.*[!=]="/>
            <property name="message" value="Use better assertion method(s): assertEquals(), assertNull(), assertSame(), etc."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Collections\.EMPTY_LIST"/>
            <property name="message" value="Use Collections.emptyList() or, better, ImmutableList.of()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Collections\.EMPTY_MAP"/>
            <property name="message" value="Use Collections.emptyMap() or, better, ImmutableMap.of()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Collections\.EMPTY_SET"/>
            <property name="message" value="Use Collections.emptySet() or, better, ImmutableSet.of()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="CoreMatchers\.equalTo"/>
            <property name="message" value="Use Assert.assertEquals()."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="CoreMatchers\.notNull"/>
            <property name="message" value="Use better assertion method(s): Assert.assertEquals(), assertNull(), assertSame(), etc."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="ImmutableList\.Builder.*new ImmutableList\.Builder"/>
            <property name="message" value="Use ImmutableList.builder() for variable assignment."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="ImmutableMap\.Builder.*new ImmutableMap\.Builder"/>
            <property name="message" value="Use ImmutableMap.builder() for variable assignment."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="ImmutableSet\.Builder.*new ImmutableSet\.Builder"/>
            <property name="message" value="Use ImmutableSet.builder() for variable assignment."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Preconditions\.checkNotNull\((?!.*,)([^()]*(\(([^()]*|\(([^()]*|\([^()]*\))*\))*\)[^()]*)*)\)"/>
            <property name="message" value="Use Preconditions.checkNotNull(Object, String)."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="Validate\.notNull\((?!.*,)([^()]*(\(([^()]*|\(([^()]*|\([^()]*\))*\))*\)[^()]*)*)\)"/>
            <property name="message" value="Use Validate.notNull(Object, String)."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="^\s*super\(\);"/>
            <property name="message" value="This is unnecessary; please delete."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="@return.*\.$"/>
            <property name="message" value="Please delete the period."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\s+$"/>
            <property name="message" value="Trailing whitespace is not allowed."/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="\? extends Object\W"/>
            <property name="message" value="Use ? rather than ? extends Object"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="^import org\.apache\.commons\.lang\."/>
            <property name="message" value="lang is deprecated, use lang3 instead"/>
        </module>
        <module name="RegexpSinglelineJava">
            <property name="format" value="^import org\.apache\.commons\.math\."/>
            <property name="message" value="math is deprecated, use math3 instead"/>
        </module>
        <module name="RightCurly"/>
        <module name="RightCurly">
            <property name="option" value="alone"/>
            <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="DOT"/>
            <property name="option" value="nl"/>
        </module>
        <module name="SeparatorWrap">
            <property name="tokens" value="COMMA"/>
            <property name="option" value="EOL"/>
        </module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="SingleLineJavadoc"/>
        <module name="StaticVariableName"/>
        <module name="StringLiteralEquality"/>
        <module name="SummaryJavadocCheck">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"/>
        </module>
        <module name="SuppressWarnings">
            <property name="format" value="serial"/>
        </module>
        <module name="SuppressWarningsHolder" />
        <module name="TypeName">
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."/>
        </module>
        <module name="TypecastParenPad"/>
        <module name="UnnecessaryParentheses"/>
        <module name="UnusedImports"/>
        <module name="UpperEll"/>
        <module name="VariableDeclarationUsageDistance">
            <property name="ignoreVariablePattern" value="stopwatch"/>
        </module>
        <module name="VisibilityModifier"/>
        <module name="WhitespaceAfter"/>
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="true"/>
            <property name="allowEmptyMethods" value="true"/>
            <property name="allowEmptyTypes" value="true"/>
            <property name="allowEmptyLoops" value="true"/>
            <property name="ignoreEnhancedForColon" value="false"/>
            <message key="ws.notFollowed" value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks may only be represented as '{}' when not part of a multi-block statement (4.1.3)"/>
            <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."/>
        </module>
    </module>
</module>
